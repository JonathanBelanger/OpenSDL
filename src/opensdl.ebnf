/*
 * Useful Definitions for various character types.  We use the hex code for the ASCII
 * characters to avoid conflicts between a letter being used and needing to be specified.
 */
Allowed			::= [#x0009] | [#x000A] | [#x000C] | [#x000D] | [#x0020-#x007E]
Disallowed		::= [#x0000-#x0008] | [#x000B] | [#x000E-#x001F] | [#x007F-#xFFFF]
Spaces			::= [#x0009] | [#x000C] | [#x0020]	/* Do not include CR/LF */
Cr_lf			::= #x000D#x000A | #x000A#x000D		/* Two variations of CR/LF */
Printable		::= [#x0021-#x007E] | Spaces | Cr_lf
Alpha			::= [#x0041-#x005A] | [#x0061-#x007A]
Numbers			::= [#x0030-#x0039]
Alphanum		::= Alpha | Numbers
Symbols			::= [#x0021-#x002F] | [#x003A-#x0040] | [#x005B-#x0060] | [#x007B-#x007E]
Binchars		::= [#x0030-#x0031]
Octchars		::= [#x0030-#x0037]
Hexchars		::= Numbers | ([#x0041-#x0046] | [#x0061-#x0066])

/*
 * Case-insensitive representations of Alpha characters.
 */
A			::= #x0041 | #x0061
B			::= #x0042 | #x0062
C			::= #x0043 | #x0063
D			::= #x0044 | #x0064
E			::= #x0045 | #x0065
F			::= #x0046 | #x0066
G			::= #x0047 | #x0067
H			::= #x0048 | #x0068
I			::= #x0049 | #x0069
J			::= #x004A | #x006A
K			::= #x004B | #x006B
L			::= #x004C | #x006C
M			::= #x004D | #x006D
N			::= #x004E | #x006E
O			::= #x004F | #x006F
P			::= #x0050 | #x0070
Q			::= #x0051 | #x0071
R			::= #x0052 | #x0072
S			::= #x0053 | #x0073
T			::= #x0054 | #x0074
U			::= #x0055 | #x0075
V			::= #x0056 | #x0076
W			::= #x0057 | #x0077
X			::= #x0058 | #x0078
Y			::= #x0059 | #x0079
Z			::= #x005A | #x007A

/*
 * Specific individual characters.
 */
Space			::= #x0020
Double_quote		::= #x0022
Pound			::= #x0023
Dollar			::= #x0024
Percent			::= #x0025
And			::= #x0026
Single_quote		::= #x0027
Openp			::= #x0028
Closep			::= #x0029
Star			::= #x002A
Plus			::= #x002B
Comma			::= #x002C
Minus			::= #x002D
Dot			::= #x002E
Fwd_slash		::= #x002F
Zero			::= #x0030
Full			::= #x003A
Semi			::= #x003B
Eq			::= #x003D
At			::= #x0040
Carat			::= #x005E
Underscore		::= #x005F
Openb			::= #x007B
Or			::= #x007C
Closeb			::= #x007D
Not			::= #x007E

/*
 * These are defintions for the various types of values (numbers and strings).
 */
Integer			::= zero | ((Percent D)? | [#x0031-#x0039] Numbers*)
Hexadecimal		::= (Precent | Zero) X Hexchars+
Octal			::= (Percent O | Zero) Octchars+
Binary			::= Percent B Binchars+
Ascii			::= Percent A ( Numbers Numbers Numbers | Hexchars Hexchars )
Str			::= Double_quote Printable* Double_qupote
File_spec		::= Alphanum* Space* Fwd_slash* Dot*

/*
 * There are 3 types of comments.  Two line and 1 block comment.
 */
TextNoEOL		::= (Alphanum | Spaces | Symbols)*
Text2EOL		::= TextNoEOL Cr_lf

/*
 * Line comments (one not written and one written to output file)
 */
Local_comment		::= Openb Text2EOL
Output_comment		::= Fwd_slash Star Text2EOL
Line_comment		::= Local_comment | Output_comment

/*
 * Block comment.
 * The start and end of a block comment can be anywhere on a line.
 * The middle comment can either be one that has the middle comment
 * symbol (//) only at the very beginning of the line, or just a
 * line of text
 */
Start_comment		::= Fwd_slash Plus TextNoEOL*
Middle_comment_1	::= Cr_lf Fwd_slash Fwd_slash TextNoEOL*
Middle_comment_2	::= Cr_lf TextNoEOL*
End_comment		::= Fwd_slash Minus
Block_comment		::= Start_comment (Middle_comment_1 | Middle_comment_2)* End_comment

Comments		::= (Line_comment | Output_comment | Block_comment)*

/*
 * Now for some math.  The organization of this is significant, as it supports
 * precidence needs.
 */
Expression		::= Expr Plus Terminal | Expr Minus Terminal | Terminal
Expr			::= Expression
Terminal		::= Term Star Condition | Term Fwd_slash Condition | Condition
Term			::= Terminal
Condition		::= Cond and Bit_op | Cond Or Bit_op | Bit_op
Cond			::= Condition
Bit_op			::= Bit At Factor | Factor
Bit			::= Bit_op
Factor			::= ( Minus | Not ) Fact | Openp Expression Closep | Number | Str
Fact			::= Factor
Number			::= Integer | Variable | Hexadecimal | Octal | Binary |
			    Ascii | Dot | Full | Carat

/*
 * This is probably the most signficiant definition.  It is used everywhere because
 * everything has a name.
 */
Name			::= Dollar | Underscore | Alpha (Dollar Underscore Alphanum)*

/*
 * Local Symbols allow for maintaining internal values that can be calculated and
 * incremented throughout the processing the input files.
 */
Variable		::= Pound Name
Local_var		::= Variable Eq Expression Semi

/*
 * Define qualifiers for the various data types
 */
Complex			::= C O M P L E X
Length			::= L E N G T H
Mask			::= M A S K
Varying			::= V A R Y I N G
Precision		::= P R E C I S I O N
Signed			::= S I G N E D
Unsigned		::= U N Signed
Sign			::= Signed | Unsigned

/*
 * Define the various data types that can be used to declare a variable or element
 * in a structure or union.
 */
Byte			::= (I N T E G E R _)? B Y T E Sign?
Word			::= (I N T E G E R _)? W O R D Sign?
Long			::= (L O N G W O R D | I N T E G E R (_ L O N G)?) Sign?
Quad			::= (Q U A D W O R | I N T E G E R _ Q U A) D Sign?
Octa			::= O C T A W O R D Sign?
Int_hw			::= (I N T E G E R _ H W | H A R D W A R E _ I N T E G E R) Sign?
S_float			::= S _ F L O A T Complex?
T_float			::= T _ F L A A T Complex?
Decimal			::= D E C I M A L Precision Openp Expression Comma Expression Closep
Bitfield		::= B I T F I E L D (Length Expression)? Mask? Sign?
Char			::= C H A R A C T E R (Length (Expression | Star))? Varying?
Addr			::= A D D R E S S | P O I N T E R
Addr_l			::= P O I N T E R _ L O N G
Addr_q			::= P O I N T E R _ Q U A D
Addr_hw			::= P O I N T E R _ H W | H A R D W A R E _ A D D R E S S
Any			::= A N Y
Boolean			::= B O O L E A N

/*
 * Define the data type categories.
 */
Integer_datatypes	::= Byte | Word | Long | Quad | Int_hw | Octa
Fp_datatypes		::= S_float | T_float
Address_datatypes	::= Addr | Addr_l | Addr_q | Addr_hw

/*
 * Define the file layout.
 */
File_layout		::= Comments Module Module_body End_module Comments

/*
 * Define the format of the INCLUDE statement.  NOTE: We are not
 * going to support the read statement.
 */
Include			::= I N C L U D E File_spec Semi

/*
 * List the supported programming languages for output.
 */
Language_name		::= C

/*
 * Define the conditional compiling constructs.
 */
Symbol_name		::= Name
Iflang			::= I F L A N G U A G E
			    Language_name+ Semi
Else			::= E L S E Semi
End_iflang		::= E N D _ I F L A N G Language_name? Semi
Ifsymb			::= I F S Y M B O L Symbol_name Semi
Else_ifsymb		::= E L S E _ I F S Y M B O L Symbol_name Semi
End_ifsymb		::= E N D _ I F S Y M B O L Semi
Cond_lang		::= Iflang | Else | End_iflang
Cond_symb		::= Ifsymb | Else_ifsymb | Else | End_ifsymb

/*
 * Define the LITERAL constructs.
 */
Literal			::= L I T E R A L Semi
End_literal		::= E N D _ L I T E R A L Semi
Literal_construct	::= Literal | End_literal

/*
 * Define the MODULE constructs.
 */
Module_name		::= Name
Module			::= M O D U L E Module_name
			    (I D E N T Str)? Semi
Module_body		::= (Item | Aggregate | Constant | Entry | Local_var |
			     Comments | Include | Declare | Cond_lang | Cond_symb |
			     Literal_construct)+
End_module		::= E N D _ M O D U L E Module_name? Semi

/*
 * Define the various options for the variable and element definitions.
 */
Pointer_name		::= Name
Member_name		::= Name
Prefix			::= P R E F I X Str
Tag			::= T A G Str
Radix			::= R A D I X (D E C | O C T | H E X)
Align			::= (A L I G | N O A L I G) N
Basealign		::= B A S E A L I G N
Storage			::= (C O M M O N | G L O B A L)
Based			::= B A S E D Pointer_name
Typedef			::= T Y P E D E F
Dimension		::= D I M E N S I O N (Expression Full)? Expression
Fill			::= F I L L
Marker			::= M A R K E R Str
Origin			::= O R I G I N Member_name
Counter			::= C O U N T E R Variable
Equals			::= E Q U A L S
String			::= S T R I N G
Increment		::= I N C R E M E N T Expression
Typename		::= T Y P E N A M E Name
Structure		::= S T R U C T U R E
Union			::= U N I O N
End			::= E N D
Basealign_attribute	::= Basealign Openp Number Closep

/*
 * Define the various categories of data types.
 */
Object_type		::= Data_type | Any | Name (Dimension)?
Pointer_type		::= Address_datatypes
			    (Openp Object_type Basealign_attribute? Closep)?
Data_type		::= Integer_datatypes | Fp_datatypes | Pointer_type |
			    Decimal | Boolean | Char

/*
 * Define the DECLARE construct (this is used for defining types that are external
 * to the resulting file so that the size of these items can be taken into
 * consideration during the processing of this file).
 */
User_type		::= Name
Declare			::= D E C L A R E User_type S I Z E O F
			    (User_type | Data_type | (Openp Expression Closep)) Prefix?
			    Tag? Semi Output_comment?

/*
 * Define the ITEM construct.
 */
Item_name		::= Name
Item			::= I T E M Item_name (Data_type | User_type)
			    (Storage | Typedef)? Basealign? Dimension? Prefix?
			    Tag? Semi Output_comment?

/*
 * Define the AGGREGATE construct elements.
 */
Options			::= (Storage | Typedef | Based)? (Align | Basealign)?
			    Dimension? Marker? Prefix? Tag? Origin? Fill?
Aggregate_name		::= Name
Aggr			::= A G G R E G A T E Aggregate_name
			    (Structure | Union) Options Semi Output_comment?
End_aggr		::= End Aggregate_name Semi Output_comment?
Subaggregate		::= Member_name (Structure | Union) Options Semi Output_comment?
Implicit_union		::= Member_name Structure Data_type Options Semi Output_comment?
End_subaggr		::= End Member_name Semi Output_comment?
Member			::= Member_name
			    (Data_type | Aggregate_name | User_type | Bitfield)
			    Options Semi Output_comment?
/*
 * Define the AGGREGATE Subaggregate construct.
 */
Sub_aggr_body		::= (Subaggregate | Implicit_union) Member+ End_subaggr
Aggregate_body		::= (Member | Sub_aggr_body)+

/*
 * Define the overall AGGREGATE construct.
 */
Aggregate		::= Aggr Aggregate_body End_aggr

/*
 * Define the CONSTANT construct.
 */
Constant_name		::= Name
Constant_names		::= Constant_name Output_comment? |
			    (Openp Constant_name (Comma Constant_name Output_comment?)* Closep)
Constant_class		::= Equals (Expression Numeric_options | String Str String_options)
String_options		::= Prefix? Tag?
Numeric_options		::= String_options Counter? Typename? Radix?
Increment_options	::= Increment? Numeric_options
Constant_list		::= Constant_names Equals Expression Increment_options
Constant_set		::= Constant_names Equals Expression Output_comment?
			    (Comma Constand_names Equals Expression Output_comment?)*
Constant		::= C O N S T A N T (Constant_name Constant_class | Constant_list | Constant_set) Semi Output_comment?

/*
 * Define the ENTRY construct.
 */
Internal_name		::= Name
Linkage_name		::= Name
Param_name		::= Name
Named			::= N A M E D Param_name
Alias			::= A L I A S Internal_name
Linkage			::= L I N K A G E Linkage_name
Entry_variable		::= V A R I A B L E
Returns			::= R E T U R N S Return_datatype Named?
Return_datatype		::= Data_type | User_type | (V O I D)

Value			::= V A L U E
Reference		::= R E F E R E N C E
Entry_dim		::= D I M E N S I O N (Expression | Star)
Default			::= D E F A U L T Expression
Param_desc		::= (Data_type | Aggregate_name) (Value | Reference)?
			    (I N)? (O U T)? Named? Entry_dim? Default?
			    Typename? (O P T I O N A L)? (L I S T)?
Parameter		::= P A R A M E T E R Openp Param_desc Output_comment? (Comma Param_desc Output_comment?)* Closep
Entry_name		::= Name
Entry			::= E N T R Y Entry_name Alias? Parameter?
			    Linkage? Entry_variable? Returns? Typename? Semi Output_comment?
