/+
// Copyright (C) Jonathan D. Belanger 2018.
// All Rights Reserved.
//
// This software is furnished under a license and may be used and copied only
// in accordance with the terms of such license and with the inclusion of the
// above copyright notice.  This software or any other copies thereof may not
// be provided or otherwise made available to any other person.  No title to
// and ownership of the software is hereby transferred.
//
// The information in this software is subject to change without notice and
// should not be construed as a commitment by the author or co-authors.
//
// The author and any co-authors assume no responsibility for the use or
// reliability of this software.
//
// Description:
//
//  This test file contains the AGGREGATE statements.
//
// Revision History:
//
//  V01.000	01-OCT-2018	Jonathan D. Belanger
//  Initially written.
/-

/+
// Test 8: This is going to test AGGREGATE.
/-
MODULE test_8;

/+
// Test 8a: Basic AGGREGATE STRUCTURE.
/-
AGGREGATE test_8a STRUCTURE;
END;

/+
// Test 8b: Basic AGGREGATE UNION.
/-
AGGREGATE test_8b UNION;
END;

/+
// Test 8c Complete AGGREGATE STRUCTURE.
/-
AGGREGATE test_8c STRUCTURE;
	type CHARACTER;
	size WORD;
	next ADDRESS;
END test_8c;

/+
// Test 8d Complete AGGREGATE STRUCTURE.
/-
AGGREGATE test_8d STRUCTURE PREFIX tst_ MARKER foo_ TAG q
		COMMON GLOBAL TYPEDEF BASED next ALIGN NOALIGN BASEALIGN(2)
		DIMENSION 2:4 ORIGIN size FILL;
	type CHARACTER NOALIGN PREFIX dsc$ TAG r;
	size WORD ALIGN DIMENSION 3:5;
	next ADDRESS BASEALIGN QUADWORD;
	last BYTE FILL;
END test_8d;

/+
// Test 8e: AGGREGATE declaration with subaggregate
/-
AGGREGATE test_8e STRUCTURE;
	opcode WORD;
	lang_bits UNION;
		pli_bits STRUCTURE;
			resolved BITFIELD;
			psv BITFIELD;
			mark1 BITFIELD;
			spare_bits BITFIELD LENGTH 5;
		END pli_bits;
		c_bits STRUCTURE;
			value_variable_size BITFIELD;
			psv BITFIELD;
			expanded BITFIELD;
			resolved BITFIELD;
			reduced BITFIELD;
			spare_bits BITFIELD LENGTH 3;
		END c_bits;
	END lang_bits;
END test_8e;

/+
// Test 8f: AGGREGATE declaration with implicit UNION.
/-
AGGREGATE test_8f STRUCTURE;
	B STRUCTURE LONGWORD;
		bit_string1 BITFIELD LONGWORD LENGTH 1;
		bit_string2 BITFIELD LONGWORD LENGTH 4;
	END B;
	last_item WORD;
END test_8f;

/+
// Test 8g: AGGREGATE declaration with implicit UNION and optional DIMENSION.
/-
AGGREGATE test_8g STRUCTURE WORD DIMENSION 3;
	first WORD;
	second WORD;
	third WORD;
END test_8g;

/+
// Test 8h: AGGREGATE declaration with negative OFFSETS.
/-
AGGREGATE test_8h STRUCTURE ORIGIN qflink;
	flink ADDRESS;
	blink ADDRESS;
	qflink ADDRESS;
	qblink ADDRESS;
END;

/+
// Test 8i: AGGREGATE declaration with forced alignment.
/-
AGGREGATE test_8i STRUCTURE;
	opcode WORD;
	lang_bits UNION;
		pli_bits STRUCTURE;
			resolved BITFIELD;
			psv BITFIELD;
			mark1 BITFIELD;
			spare_bits BITFIELD LENGTH 5;
		END pli_bits;
		c_bits STRUCTURE;
			value_variable_size BITFIELD;
			psv BITFIELD;
			expanded BITFIELD;
			resolved BITFIELD;
			reduced BITFIELD;
			spare_bits BITFIELD LENGTH 3;
		END c_bits;
	END lang_bits;
END test_8i;

/+
// Test 8j: AGGREGATE declaration with offset symbols.
/-
#max_args = 10;
AGGREGATE test_8j STRUCTURE PREFIX opr_;
	flink ADDRESS;
	blink ADDRESS;
	opcount WORD;
	optype CHARACTER LENGTH 1;
	id WORD;
	flags STRUCTURE;
		is_constant_size BITFIELD LENGTH 1 MASK;
		is_terminator BITFIELD MASK LENGTH 1;
		context BITFIELD LENGTH 3 MASK;
		filler BITFIELD LENGTH 8-^;
	END;
	#opsize = .;
	operands LONGWORD DIMENSION(#max_args);
	#instruction_size = :;
END;
CONSTANT node_size EQUALS #opsize / 2;
CONSTANT inst_size EQUALS #instruction_size;

END_MODULE test_8;
